on: [push]

jobs:
  check:
    strategy:
      matrix:
        target:
          - os: ubuntu-latest
            target: x86_64-linux
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - name: Install Nix
        run: |
          mkdir -p ~/nix/store
          chmod 777 -R ~/nix
          sudo mkdir -p /nix/store
          sudo chmod 777 -R /nix
          sudo mount --options bind ~/nix/store /nix/store

          sh <(curl -L https://nixos.org/nix/install) --no-daemon
          
          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix
      - name: Check extension
        run: |
          . ~/.nix-profile/etc/profile.d/nix.sh
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1

          nix flake show
          nix flake check --print-build-logs --no-build --verbose
          
  build:
    needs: check
    strategy:
      matrix:
        pg_version:
          - 10
          - 11
          - 12
          - 13
        target:
          - os: ubuntu-latest
            platform: x86_64-linux
          - os: macos-latest
            platform: x86_64-darwin
          # - os: ubuntu-latest
          #   platform: aarch64-linux
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Nix
        run: |
          mkdir -p ~/nix/store
          chmod 777 -R ~/nix
          sudo mkdir -p /nix/store
          sudo chmod 777 -R /nix
          sudo mount --options bind ~/nix/store /nix/store

          sh <(curl -L https://nixos.org/nix/install) --no-daemon

          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix
      # On aarch64 we install binfmt and use an impure nix to get it building.
      - if: ${{ matrix.target.platform == 'aarch64-linux' }} 
        name: Install aarch64 binfmt
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64
      - name: Build extension
        run: |
          . ~/.nix-profile/etc/profile.d/nix.sh
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          
          export EXTENSION=$(grep 'name = ".*"' Cargo.toml | sed 's/name = "\(.*\)"$/\1/')
          echo "EXTENSION=${EXTENSION}" >> $GITHUB_ENV

          nix flake show
          nix build \
            --option system ${{ matrix.target.platform }} \
            .#${EXTENSION}_${{ matrix.pg_version }}_debug \
            --out-link out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug \
            --print-build-logs \
            --verbose
          
          mkdir -v -p ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug
          rsync -v -L -a out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug/* ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug/
      - uses: actions/upload-artifact@v2
        name: Upload artifact
        with:
          name: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
          path: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
