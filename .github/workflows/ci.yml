on: [push]

jobs:
  # check:
  #   strategy:
  #     matrix:
  #       target:
  #         - os: ubuntu-latest
  #           target: x86_64-linux
  #   runs-on: ${{ matrix.target.os }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       name: Checkout
  #     - name: Install Nix
  #       run: |
  #         sh <(curl -L https://nixos.org/nix/install) --daemon
          
  #         mkdir -p ~/.config/nix/
  #         echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

  #         mkdir -p ~/.config/nixpkgs/
  #         echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix
  #     - name: Check extension
  #       run: |
  #         . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
  #         export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1

  #         nix flake show
  #         nix flake check \
  #           --store local?root=~/nix-store-cache \
  #           --print-build-logs \
  #           --no-build \
  #           --verbose
          
  build:
    # needs: check
    strategy:
      matrix:
        pg_version:
          - 10
          - 11
          - 12
          - 13
        target:
          - os: ubuntu-latest
            platform: x86_64-linux
          - os: macos-latest
            platform: x86_64-darwin
          # - os: ubuntu-latest
          #   platform: aarch64-linux
    runs-on: ${{ matrix.target.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v2
      - name: Install Nix
        run: |
          sh <(curl -L https://nixos.org/nix/install) --daemon

          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix
      # # On aarch64 we install binfmt and use an impure nix to get it building.
      # - if: ${{ matrix.target.platform == 'aarch64-linux' }} 
      #   name: Install aarch64 binfmt
      #   uses: docker/setup-qemu-action@v1
      #   with:
      #     image: tonistiigi/binfmt:latest
      #     platforms: arm64
      - name: Fetch nix store cache
        uses: actions/cache@v2
        with:
          path: |
            ~/nix-store-cache
            ~/.config/nix
            ~/.config/nixpkgs
          key: ${{ matrix.target.platform }}-nix-v0
      - name: Restore nix store cache
        if: hashFiles('~/nix-store-cache') != ''
        run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh

          nix copy --eval-store local --from file://$HOME/nix-store-cache --derivation .#${EXTENSION}_${{ matrix.pg_version }}_debug
      - name: Build extension
        run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          
          export EXTENSION=$(grep 'name = ".*"' Cargo.toml | sed 's/name = "\(.*\)"$/\1/')
          echo "EXTENSION=${EXTENSION}" >> $GITHUB_ENV

          nix flake show
          nix build \
            --option system ${{ matrix.target.platform }} \
            --out-link out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug \
            --print-build-logs \
            --verbose \
            -j2 \
            .#${EXTENSION}_${{ matrix.pg_version }}_debug
          
          mkdir -v -p ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug
          sudo rsync -v -L -a \
            out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug/* \
            out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug
      - uses: actions/upload-artifact@v2
        name: Upload artifact
        with:
          name: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
          path: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
      - name: Create nix store cache
        run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          export EXTENSION=$(grep 'name = ".*"' Cargo.toml | sed 's/name = "\(.*\)"$/\1/')
          
          nix copy --eval-store local --to file://$HOME/nix-store-cache --derivation .#${EXTENSION}_${{ matrix.pg_version }}_debug
          