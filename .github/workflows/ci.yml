on: [push]

jobs:
  check:
    strategy:
      matrix:
        target:
          - os: ubuntu-latest
            target: x86_64-linux
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          sh <(curl -L https://nixos.org/nix/install) --daemon
          
          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix

          echo "STORE_USER=$(stat -c %U /nix/store)" >> $GITHUB_ENV
          sudo chown $USER -R /nix/store
      - name: Cache nix store
        uses: actions/cache@v2
        with:
          path: /nix/store
          key: check-${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - run:
          sudo chown -R ${{ env.EXTENSION }} /nix/store
      - run: |
          . /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1

          nix flake show
          nix flake check --print-build-logs --no-build --verbose
          
  build:
    needs: check
    strategy:
      matrix:
        pg_version:
          - 10
          - 11
          - 12
          - 13
        target:
          - os: ubuntu-latest
            platform: x86_64-linux
          - os: macos-latest
            platform: x86_64-darwin
          - os: ubuntu-latest
            platform: aarch64-linux
    runs-on: ${{ matrix.target.os }}
    steps:
      - uses: actions/checkout@v2
      - run: |
          sh <(curl -L https://nixos.org/nix/install) ${{ matrix.target.platform == 'aarch64-linux' && '&& true' || '--daemon' }}
          
          mkdir -p ~/.config/nix/
          echo "experimental-features = nix-command flakes" >> ~/.config/nix/nix.conf

          mkdir -p ~/.config/nixpkgs/
          echo "{ allowUnsupportedSystem = true; }" > ~/.config/nixpkgs/config.nix

          echo "STORE_USER=$(stat -c %U /nix/store)" >> $GITHUB_ENV
          sudo chown -R $USER /nix/store
      - name: Cache nix store
        uses: actions/cache@v2
        with:
          path: /nix/store
          key: build-${{ matrix.target.platform }}-${{ runner.os }}-${{ hashFiles('flake.lock') }}
      - run:
          sudo chown -R ${{ env.EXTENSION }} /nix/store
      # On aarch64 we install binfmt and use an impure nix to get it building.
      - if: ${{ matrix.target.platform == 'aarch64-linux' }} 
        uses: docker/setup-qemu-action@v1
        with:
          image: tonistiigi/binfmt:latest
          platforms: arm64
      - run: |
          ${{ matrix.target.platform == 'aarch64-linux' && '. ~/.nix-profile/etc/profile.d/nix.sh' || '. /nix/var/nix/profiles/default/etc/profile.d/nix-daemon.sh' }}
          export NIXPKGS_ALLOW_UNSUPPORTED_SYSTEM=1
          
          export EXTENSION=$(grep 'name = ".*"' Cargo.toml | sed 's/name = "\(.*\)"$/\1/')
          echo "EXTENSION=${EXTENSION}" >> $GITHUB_ENV

          nix flake show
          nix build \
            --option system ${{ matrix.target.platform }} \
            .#${EXTENSION}_${{ matrix.pg_version }}_debug \
            --out-link out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug \
            --print-build-logs \
            --verbose
          
          mkdir -v -p ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug
          rsync -v -L out-${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug/* ${{ matrix.target.platform }}.${EXTENSION}_${{ matrix.pg_version }}_debug/
      - uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
          path: ${{ matrix.target.platform }}.${{ env.EXTENSION }}_${{ matrix.pg_version }}_debug
